template#xlist-el
	style.
		p { color: orange; }
	//p I'm Shady
	#myList
		input.search(placeholder='Search')
		ul.list

script.
	console.log ('in temp list')
	class ListEl extends HTMLElement {
		constructor() {
			super()
			console.log('list cons')
			let shadowRoot = this.attachShadow({mode: 'open'})
			const t = document.querySelector('#xlist-el')
			const instance = t.content.cloneNode(true)
			shadowRoot.appendChild(instance)

			//this._emit = flyd.stream()
			this.loadDeps()
		}//()

		init(values) {
			const thiz = this
			loadjs.ready(['list'], {
				success: function(){
					var options = {
						valueNames: [ 
										{ attr: 'href', name: 'url' }
										,'head_line'
									]
						,item: '<li><a class="url head_line" ></a></li>'
					}
					const lst = thiz.shadowRoot.querySelector('#myList', this)//ctx
					var userList = new List(lst, options, values)
					$("#myList").append("<span id='list-ready'></span>")// MAGIC!!

				}//suc
			})//load
		}//()

		loadDeps() {
			loadjs([
					'//cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js'
				], { success: function(){
					loadjs.done('list')
				}
			})//loadjs
		}//()

		/*
		set receiver(stream) {
			this._rec = stream
			//flyd.on(_handleRec, stream)
		}
		_handleRec(el) {
			console.log(el)
		}
		get emitter() {
			return this._emit
		}
		*/

	}//class